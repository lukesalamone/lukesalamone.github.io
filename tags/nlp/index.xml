<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nlp on Luke Salamone&#39;s Blog</title>
    <link>https://lukesalamone.github.io/tags/nlp/</link>
    <description>Recent content in nlp on Luke Salamone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Nov 2022 02:42:51 -0700</lastBuildDate><atom:link href="https://lukesalamone.github.io/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rolling My Own Blog Search</title>
      <link>https://lukesalamone.github.io/posts/rolling-my-own-blog-search/</link>
      <pubDate>Wed, 09 Nov 2022 02:42:51 -0700</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/rolling-my-own-blog-search/</guid>
      <description>I&amp;rsquo;ve found myself hitting ctrl+f on this blog enough that I figured it&amp;rsquo;s about time to add some search functionality to it. While there are certainly prefab solutions out there, this task is simple enough and fairly instructive. I had a few requirements, though:
 The search needs to be fast, useful, and aesthetically pleasing. Search in the browser. Standing up a server is a lot of extra work. It&amp;rsquo;s also overkill since I only have about 30 articles so far.</description>
    </item>
    
    <item>
      <title>Paper Summary: COMET (Knowledge Graph Construction)</title>
      <link>https://lukesalamone.github.io/posts/knowledge-graph-construction/</link>
      <pubDate>Tue, 17 May 2022 17:47:25 +0700</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/knowledge-graph-construction/</guid>
      <description>Selected {subject, relation, object} tuples generated by COMET
  Paper link: https://arxiv.org/abs/1906.05317
This paper describes COMET, a method of generating knowledge bases automatically. Previous work largely focused on encyclopedic knowledge, which has well-defined relationships. This paper, however, focuses on commonsense knowledge. In this paper the authors introduce a ‚Äúcommonsense transformer‚Äù which trains on a knowledge base consisting of tuples and a pre-trained language model. Their trained model generates new nodes in the knowledge graph and completes phrases based on edges in the existing graph.</description>
    </item>
    
    <item>
      <title>Paper Summary: Defending Against Neural Fake News</title>
      <link>https://lukesalamone.github.io/posts/grover-paper-summary/</link>
      <pubDate>Sun, 19 Sep 2021 20:13:09 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/grover-paper-summary/</guid>
      <description>Defending Against Neural Fake News by Zellers et al. presents a model for controllable text generation called Grover. This model can be used to create highly believable computer-generated news articles. The authors present this paper as a method of detecting and preventing the spread of fake news. They claim their model is 92% accurate at detecting fake news stories, partially due to artifacts that generators include in the generated text.</description>
    </item>
    
    <item>
      <title>BERT vs GPT-2 Performance</title>
      <link>https://lukesalamone.github.io/posts/bert-vs-gpt2/</link>
      <pubDate>Mon, 21 Jun 2021 01:04:42 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/bert-vs-gpt2/</guid>
      <description>There are quite a few BERT vs GPT-2 breakdowns online, mostly focusing on the architectural differences between the two models. However, I am more interested in the performance differences between the two models, specifically their predictive capabilities. This blog post outlines the results of my experiments.
The code used in this experiment can be found on my Github
BERT The Devlin et al. model was released in November 2018. It is a transformer-based language model pretrained on masked input (also known as the cloze task).</description>
    </item>
    
    <item>
      <title>How does GPT-2 Tokenize Text?</title>
      <link>https://lukesalamone.github.io/posts/gpt2-tokenization/</link>
      <pubDate>Thu, 17 Jun 2021 19:30:48 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/gpt2-tokenization/</guid>
      <description>Let&amp;rsquo;s explore how GPT-2 tokenizes text.
What is tokenization? It&amp;rsquo;s important to understand that GPT-2 doesn&amp;rsquo;t work with strings directly. Instead, it needs to tokenize the input string, which is essentially a process for converting the string into a list of numbers, or &amp;ldquo;tokens&amp;rdquo;. It is these tokens which are passed into the model during training or for inference. As a concrete example, let&amp;rsquo;s look at a few sample sentences:</description>
    </item>
    
    <item>
      <title>What Are Attention Masks?</title>
      <link>https://lukesalamone.github.io/posts/what-are-attention-masks/</link>
      <pubDate>Tue, 15 Jun 2021 19:09:36 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/what-are-attention-masks/</guid>
      <description>TLDR: Attention masks allow us to send a batch into the transformer even when the examples in the batch have varying lengths. We do this by padding all sequences to the same length, then using the &amp;ldquo;attention_mask&amp;rdquo; tensor to identify which tokens are padding.
 Here we use a batch with three samples padded from the left since we want to predict the next token on the right. (Padding on the right would probably predict another pad.</description>
    </item>
    
    <item>
      <title>How to Train and Run a Simple Language Model</title>
      <link>https://lukesalamone.github.io/posts/running-simple-language-model/</link>
      <pubDate>Fri, 16 Apr 2021 21:08:53 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/running-simple-language-model/</guid>
      <description>This article will show how to run a simple language model, KenLM. It&amp;rsquo;s not as powerful as transformer-based models like BERT or GPT-3, but depending on what you&amp;rsquo;re trying to accomplish it may be more than enough. This tutorial should take you about 15 minutes, including the time to run the scripts.
Let&amp;rsquo;s work backwards from where we&amp;rsquo;re trying to get to. When you&amp;rsquo;ve finished, you should be able to run the following script:</description>
    </item>
    
    <item>
      <title>What is Temperature in NLP?üê≠</title>
      <link>https://lukesalamone.github.io/posts/what-is-temperature/</link>
      <pubDate>Fri, 02 Apr 2021 00:50:38 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/what-is-temperature/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } });  MathJax.Hub.Queue(function() { // Fix  tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i Temperature is a parameter used in natural language processing models to increase or decrease the &amp;ldquo;confidence&amp;rdquo; a model has in its most likely response.</description>
    </item>
    
    <item>
      <title>What is Perplexity?</title>
      <link>https://lukesalamone.github.io/posts/perplexity/</link>
      <pubDate>Thu, 01 Apr 2021 12:14:49 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/perplexity/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } });  MathJax.Hub.Queue(function() { var all = MathJax.Hub.getAllJax(), i; for(i = 0; i TLDR: NLP metric ranging from 1 to infinity. Lower is better.
In natural language processing, perplexity is the most common metric used to measure the performance of a language model.</description>
    </item>
    
  </channel>
</rss>
