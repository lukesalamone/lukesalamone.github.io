<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ai on Luke Salamone&#39;s Blog</title>
    <link>https://lukesalamone.github.io/tags/ai/</link>
    <description>Recent content in ai on Luke Salamone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 17 Apr 2023 19:46:25 -0700</lastBuildDate><atom:link href="https://lukesalamone.github.io/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Paper Summary: Antenna Design with Evolutionary Algorithms</title>
      <link>https://lukesalamone.github.io/posts/evolutionary-antenna-design/</link>
      <pubDate>Mon, 17 Apr 2023 19:46:25 -0700</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/evolutionary-antenna-design/</guid>
      <description>This is a summary of Automated Antenna Design with Evolutionary Algorithms, a 2006 paper by Hornby et al. As large language models become more and more synonymous with &amp;ldquo;AI&amp;rdquo;, it is interesting to see how researchers solved problems in the past.
Typically, antennas are designed and built by hand by domain experts. This is a very time-consuming process, however, so researchers have been investigating evolutionary algorithms since the 1990s. Inspired by natural evolution, an evolutionary algorithm is based on small, random changes and an evaluation metric.</description>
    </item>
    
    <item>
      <title>My Favorite Antimaia Games</title>
      <link>https://lukesalamone.github.io/posts/best-antimaia-games/</link>
      <pubDate>Sat, 26 Nov 2022 20:25:13 -0800</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/best-antimaia-games/</guid>
      <description>This is a follow up to When Suboptimal Minimax is Better. After running 400 simulations, I can conclusively say that opponent modeling is pretty cool.
The TLDR on opponent modeling is that if we have a pretty good idea of what the opponent might do, we can beat them faster by playing moves which aren&amp;rsquo;t objectively &amp;ldquo;optimal&amp;rdquo; as far as minimax is concerned. Here, Maia 1900 is a model of a relatively high-level chess player.</description>
    </item>
    
    <item>
      <title>A new type of chess tournament</title>
      <link>https://lukesalamone.github.io/posts/qualitative-analysis-chess/</link>
      <pubDate>Sat, 08 Oct 2022 15:17:36 -0700</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/qualitative-analysis-chess/</guid>
      <description>This is part 2 of a paper I wrote for Ken Forbus&amp;rsquo; Qualitative Reasoning course, adapted for this blog. You can find a printable version of the paper here and part 1 here.
In the previous post I discussed the history of chess engines and why they don&amp;rsquo;t &amp;ldquo;think&amp;rdquo; like we think. Trading interpretability for computation cycles ultimately led to the engines we have today, fairly alien in nature and perhaps less pedagogically useful because of it.</description>
    </item>
    
    <item>
      <title>The Chess Engine&#39;s Final Horizon</title>
      <link>https://lukesalamone.github.io/posts/chess-engine-history/</link>
      <pubDate>Fri, 07 Oct 2022 20:17:21 -0700</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/chess-engine-history/</guid>
      <description>This is part 1 of a paper I wrote for Ken Forbus&amp;rsquo; Qualitative Reasoning course, adapted for this blog. You can find a printable version of the paper here and part 2 here.
Computers that play chess, otherwise known as chess engines, have existed since at least the late 1940s. Because the game was said to require the perfect combination of planning, strategy, psychology, and calculation, chess was once thought to be an activity directly correlated with intelligence, and that only a truly intelligent computer should be able to defeat humans.</description>
    </item>
    
    <item>
      <title>When Suboptimal Minimax is Better</title>
      <link>https://lukesalamone.github.io/posts/suboptimal-minimax/</link>
      <pubDate>Sat, 02 Jul 2022 16:24:10 -0500</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/suboptimal-minimax/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } });  MathJax.Hub.Queue(function() { var all = MathJax.Hub.getAllJax(), i; for(i = 0; i Minimax solves for optimal opponent play, minimizing the best move an opponent could make. But what if we knew the opponent wouldn&amp;rsquo;t make the best move?</description>
    </item>
    
    <item>
      <title>Creating an AI for Gomoku</title>
      <link>https://lukesalamone.github.io/posts/gomoku2049/</link>
      <pubDate>Tue, 19 May 2020 14:28:57 +0800</pubDate>
      
      <guid>https://lukesalamone.github.io/posts/gomoku2049/</guid>
      <description>Gomoku is a strategy game similar to tic tac toe, but played on a larger board and with the goal of getting 5 in a row rather than 3. Since the game has perfect information and has simple rules, I thought it would be a fun exercise in creating a game AI. In February 2020 I decided to code up Gomoku2049. The game is a demonstration of MiniMax, which is an algorithm for finding the move which minimizes the opponentâ€™s best moves.</description>
    </item>
    
  </channel>
</rss>
